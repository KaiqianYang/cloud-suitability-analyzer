{"ast":null,"code":"import { listenForAttributeChange as t } from \"../utils/events.js\";\nimport { GlobalStateService as e } from \"../services/global.service.js\";\n\nfunction s() {\n  return t => {\n    t.addInitializer(t => {\n      t.layerController || (t.layerController = new r(t));\n    });\n  };\n}\n\nclass r {\n  constructor(t) {\n    this.host = t, this.host.addController(this);\n  }\n\n  get isActiveLayer() {\n    return this.layers[this.layers.length - 1] === this.host;\n  }\n\n  get layerIndex() {\n    const t = this.layers.indexOf(this.host);\n    return -1 === t ? null : t;\n  }\n\n  get layers() {\n    return [...e.state.layerElements];\n  }\n\n  set layers(t) {\n    e.state.layerElements = [...t];\n  }\n\n  hostConnected() {\n    this.host.hasAttribute(\"_demo-mode\") || (this.updateLayer(), this.observer = t(this.host, \"hidden\", () => this.updateLayer()));\n  }\n\n  hostDisconnected() {\n    this.observer?.disconnect(), this.removeLayer();\n  }\n\n  updateLayer() {\n    this.host.hasAttribute(\"hidden\") ? this.removeLayer() : this.addLayer(), this.layers.forEach((t, e) => t.setAttribute(\"cds-layer\", \"\" + e));\n  }\n\n  addLayer() {\n    this.layers.find(t => this.host === t) || (this.layers = [...this.layers, this.host], \"true\" === this.host.ariaModal && (this.layers.filter(t => \"true\" === t.ariaModal).forEach(t => t.role = \"region\"), this.host.role = \"dialog\"));\n  }\n\n  removeLayer() {\n    this.layers = this.layers.filter(t => t !== this.host), this.host.removeAttribute(\"cds-layer\");\n    const t = this.layers.find(t => \"true\" === t.ariaModal);\n    t && (t.role = \"dialog\");\n  }\n\n}\n\nexport { r as LayerController, s as layer }; //# sourceMappingURL=layer.controller.js.map","map":null,"metadata":{},"sourceType":"module"}