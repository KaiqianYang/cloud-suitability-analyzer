{"ast":null,"code":"import { __decorate as e } from \"tslib\";\nimport { html as t } from \"lit\";\nimport { getElementUpdates as i, property as s, state as n, event as o } from \"@cds/core/internal\";\nimport r from \"./control-inline.element.scss.js\";\nimport { CdsControl as l, ControlLabelLayout as a } from \"../control/control.element.js\";\nimport { getStatusIcon as c } from \"../utils/utils.js\";\n\nclass d extends l {\n  constructor() {\n    super(...arguments);\n    this.controlAlign = \"left\", this.checked = !1, this.indeterminate = !1, this.supportsPrefixSuffixActions = !1;\n  }\n\n  static get styles() {\n    return [...super.styles, r];\n  }\n\n  get internalLabelTemplate() {\n    return this.labelLayout !== a.ariaLabel ? t`<cds-internal-control-label action=\"secondary\" .disabled=\"${this.disabled}\" cds-layout=\"align:vertical-center\"><slot name=\"label\" @slotchange=\"${() => this.associateInputAndLabel()}\"></slot></cds-internal-control-label>` : \"\";\n  }\n\n  render() {\n    return t`<div class=\"private-host\" cds-layout=\"${this.isControlGroup ? \"horizontal align:vertical-center\" : \"vertical\"} gap:xs\"><div cds-layout=\"horizontal gap:xs wrap:none align:vertical-center ${\"right\" === this.controlAlign ? \"order:reverse\" : \"\"}\"><div role=\"presentation\" class=\"input\" @click=\"${this.selectInput}\"></div><div role=\"presentation\" focusable @click=\"${this.selectInput}\"></div>${this.internalLabelTemplate}</div>${this.messages?.length ? t`<div cds-layout=\"horizontal wrap:none ${this.messages?.length ? \"gap:xs\" : \"\"}\">${c(this.status)}<div cds-layout=\"align:vertical-center\" class=\"messages\"><slot name=\"message\"></slot></div></div>` : \"\"}</div><div cds-layout=\"display:screen-reader-only\"><slot name=\"input\"></slot></div>`;\n  }\n\n  firstUpdated(e) {\n    super.firstUpdated(e), this.inputControl.addEventListener(\"change\", () => this.checked = this.inputControl.checked), this.observers.push(i(this.inputControl, \"checked\", e => this.checked = \"\" === e || e), i(this.inputControl, \"indeterminate\", e => this.indeterminate = \"\" === e || e));\n  }\n\n  updated(e) {\n    super.updated(e), e.has(\"indeterminate\") && e.get(\"indeterminate\") !== this.indeterminate && this.indeterminate && (this.checked = !1), e.has(\"checked\") && e.get(\"checked\") !== this.checked && this.checked && (this.indeterminate = !1, this.checkedChange.emit(this.checked, {\n      bubbles: !this.isControlGroup\n    }));\n  }\n\n  selectInput(e) {\n    this.inputControl.click(), e.preventDefault();\n  }\n\n}\n\ne([s({\n  type: String\n})], d.prototype, \"controlAlign\", void 0), e([n()], d.prototype, \"isControlGroup\", void 0), e([n({\n  type: Boolean,\n  reflect: !0\n})], d.prototype, \"checked\", void 0), e([n({\n  type: Boolean,\n  reflect: !0\n})], d.prototype, \"indeterminate\", void 0), e([o()], d.prototype, \"checkedChange\", void 0);\nexport { d as CdsInternalControlInline }; //# sourceMappingURL=control-inline.element.js.map","map":null,"metadata":{},"sourceType":"module"}