{"ast":null,"code":"import { __decorate as e } from \"tslib\";\nimport { LitElement as t, html as o } from \"lit\";\nimport { baseStyles as d, property as i, event as a, querySlot as n, animate as s, AnimationAccordionPanelOpenName as r, reverseAnimation as c } from \"@cds/core/internal\";\nimport p from \"./accordion-panel.element.scss.js\";\nlet l = class extends t {\n  constructor() {\n    super(...arguments);\n    this.cdsMotion = \"on\", this.disabled = !1, this.expanded = !1;\n  }\n\n  toggle() {\n    this.expandedChange.emit(!this.expanded);\n  }\n\n  updated(e) {\n    super.updated(e), this.content && this.header && (this.content.setAttribute(\"aria-labelledby\", this.header.id), this.header.setAttribute(\"aria-controls\", this.content.id), this.header.expanded = this.expanded);\n  }\n\n  render() {\n    return o`<div class=\"private-host\" role=\"group\"><button class=\"accordion-header-button\" cds-layout=\"horizontal align:vertical-center gap:sm\" type=\"button\" @click=\"${() => this.toggle()}\" ?disabled=\"${this.disabled}\" aria-disabled=\"${this.disabled}\" aria-expanded=\"${this.expanded}\" focusable><slot name=\"accordion-header\"></slot></button><div aria-hidden=\"${!this.expanded}\" class=\"accordion-content\"><slot name=\"accordion-content\"></slot></div></div>`;\n  }\n\n  static get styles() {\n    return [d, p];\n  }\n\n};\ne([i({\n  type: String\n})], l.prototype, \"cdsMotion\", void 0), e([a()], l.prototype, \"cdsMotionChange\", void 0), e([i({\n  type: Boolean\n})], l.prototype, \"disabled\", void 0), e([i({\n  type: Boolean\n})], l.prototype, \"expanded\", void 0), e([n(\"cds-accordion-header\")], l.prototype, \"header\", void 0), e([n(\"cds-accordion-content\")], l.prototype, \"content\", void 0), e([a()], l.prototype, \"expandedChange\", void 0), l = e([s({\n  expanded: {\n    true: r,\n    false: c(r)\n  }\n})], l);\nexport { l as CdsAccordionPanel }; //# sourceMappingURL=accordion-panel.element.js.map","map":null,"metadata":{},"sourceType":"module"}