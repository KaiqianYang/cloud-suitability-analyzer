{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { html as s } from \"lit\";\nimport { getElementUpdates as r, globalStyle as i } from \"@cds/core/internal\";\nimport { CdsControl as e } from \"@cds/core/forms\";\nimport o from \"./range.global.scss.js\";\nimport n from \"./range.element.scss.js\";\n\nclass p extends e {\n  constructor() {\n    super(...arguments);\n    this.globalStyles = o;\n  }\n\n  static get styles() {\n    return [...super.styles, n];\n  }\n\n  get inputTemplate() {\n    return s`<div class=\"input-track\"></div>`;\n  }\n\n  firstUpdated(t) {\n    super.firstUpdated(t), this.setTrackWidth(), this.inputControl.addEventListener(\"input\", () => this.setTrackWidth()), this.observers.push(r(this.inputControl, \"value\", t => {\n      this.setTrackWidth(t);\n    }));\n  }\n\n  setTrackWidth(t) {\n    const s = t ?? this.inputControl.valueAsNumber,\n          r = this.inputControl.min ? parseInt(this.inputControl.min) : 0,\n          i = this.inputControl.max ? parseInt(this.inputControl.max) : 100;\n    this.style.setProperty(\"--track-width\", Math.floor((s - r) / (i - r) * 100) + \"%\");\n  }\n\n}\n\nt([i()], p.prototype, \"globalStyles\", void 0);\nexport { p as CdsRange }; //# sourceMappingURL=range.element.js.map","map":null,"metadata":{},"sourceType":"module"}