{"ast":null,"code":"import { __decorate as s } from \"tslib\";\nimport { LitElement as i, html as e } from \"lit\";\nimport { I18nService as t, hasStringPropertyChanged as r, updateEquilateralSizeStyles as a, isNilOrEmpty as o, baseStyles as l, property as h, i18n as n } from \"@cds/core/internal\";\nimport { getProgressCircleRadius as u } from \"./progress-circle.utils.js\";\nimport p from \"./progress-circle.element.scss.js\";\n\nclass d extends i {\n  constructor() {\n    super(...arguments);\n    this.status = \"neutral\", this.inverse = !1, this.line = 3, this.i18n = t.keys.progress;\n  }\n\n  get radius() {\n    return u(this.line);\n  }\n\n  get circumference() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  get progress() {\n    return this.value ?? 30;\n  }\n\n  get progressOffset() {\n    return (100 - this.progress) / 100 * this.circumference;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(s) {\n    if (r(s, this._size)) {\n      const i = this._size;\n      this._size = s, a(this, s), this.requestUpdate(\"size\", i);\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), this._ariaLabel = this.ariaLabel, this.updateAria();\n  }\n\n  updated(s) {\n    super.updated(s), (s.has(\"value\") || s.has(\"i18n\")) && this.updateAria();\n  }\n\n  updateAria() {\n    this._ariaLabel === this.ariaLabel && (this._ariaLabel = o(this.value) ? this.i18n.looping : `${this.i18n.loading} ${this.value}%`, this.ariaLabel = this._ariaLabel), o(this.value) ? (this.role = \"img\", this.ariaValueMin = null, this.ariaValueMax = null, this.ariaValueNow = null) : (this.role = \"progressbar\", this.ariaValueMin = 0, this.ariaValueMax = 100, this.ariaValueNow = this.value);\n  }\n\n  render() {\n    return e`<div class=\"private-host\" aria-hidden=\"true\"><div class=\"progress-wrapper\"><svg version=\"1.1\" viewBox=\"0 0 36 36\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" focusable=\"false\"><circle stroke-width=\"${this.line}\" fill=\"none\" cx=\"18\" cy=\"18\" r=\"${this.radius}\" class=\"${this.progress > 99 ? \"arcstroke\" : \"backstroke\"}\"/><path d=\"M 18 18 m 0,-${this.radius} a ${this.radius},${this.radius} 0 1 1 0,${2 * this.radius} a ${this.radius},${this.radius} 0 1 1 0,-${2 * this.radius}\" class=\"fillstroke arcstroke\" stroke-width=\"${this.line}\" stroke-dasharray=\"${this.circumference}\" stroke-dashoffset=\"${this.progressOffset}\" fill=\"none\"/></svg></div></div>`;\n  }\n\n  static get styles() {\n    return [l, p];\n  }\n\n}\n\ns([h({\n  type: String\n})], d.prototype, \"status\", void 0), s([h({\n  type: Boolean\n})], d.prototype, \"inverse\", void 0), s([h({\n  type: Number\n})], d.prototype, \"value\", void 0), s([h({\n  type: Number\n})], d.prototype, \"line\", void 0), s([h({\n  type: String\n})], d.prototype, \"size\", null), s([n()], d.prototype, \"i18n\", void 0);\nexport { d as CdsProgressCircle }; //# sourceMappingURL=progress-circle.element.js.map","map":null,"metadata":{},"sourceType":"module"}