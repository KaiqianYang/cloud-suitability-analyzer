{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { html as e } from \"lit\";\nimport { listenForAttributeChange as s, globalStyle as o, state as i } from \"@cds/core/internal\";\nimport { CdsControl as r } from \"@cds/core/forms\";\nimport { inputStyles as l } from \"@cds/core/input\";\nimport p from \"./select.global.scss.js\";\nimport n from \"./select.element.scss.js\";\n\nclass u extends r {\n  constructor() {\n    super(...arguments);\n    this.globalStyles = p, this.multiple = !1, this.size = !1;\n  }\n\n  get suffixDefaultTemplate() {\n    return e`<cds-button-expand expanded readonly=\"readonly\"></cds-button-expand>`;\n  }\n\n  static get styles() {\n    return [...super.styles, l, n];\n  }\n\n  firstUpdated(t) {\n    super.firstUpdated(t), this.multiple = this.inputControl.hasAttribute(\"multiple\"), this.observers.push(s(this.inputControl, \"multiple\", t => this.multiple = null !== t)), this.size = this.inputControl.hasAttribute(\"size\"), this.observers.push(s(this.inputControl, \"size\", t => this.size = null !== t));\n  }\n\n}\n\nt([o()], u.prototype, \"globalStyles\", void 0), t([i({\n  type: Boolean,\n  reflect: !0\n})], u.prototype, \"multiple\", void 0), t([i({\n  type: Boolean,\n  reflect: !0\n})], u.prototype, \"size\", void 0);\nexport { u as CdsSelect }; //# sourceMappingURL=select.element.js.map","map":null,"metadata":{},"sourceType":"module"}