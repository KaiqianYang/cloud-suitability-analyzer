{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { html as i } from \"lit\";\nimport { property as e } from \"@cds/core/internal\";\nimport { CdsButtonAction as r } from \"@cds/core/button-action\";\nimport s from \"./button-expand.element.scss.js\";\n\nclass o extends r {\n  constructor() {\n    super();\n    this.action = \"vertical\", this.expanded = !1;\n  }\n\n  static get styles() {\n    return [super.styles, s];\n  }\n\n  get iconDirection() {\n    return \"vertical\" === this.action ? this.expanded ? \"down\" : \"right\" : \"horizontal\" === this.action ? this.expanded ? \"left\" : \"right\" : \"up\";\n  }\n\n  get iconShape() {\n    return \"detail\" === this.action ? this.expanded ? \"detail-collapse\" : \"detail-expand\" : \"angle\";\n  }\n\n  render() {\n    return i`<div class=\"private-host\"><slot><cds-icon .shape=\"${this.iconShape}\" .direction=\"${this.iconDirection}\"></cds-icon></slot></div>`;\n  }\n\n  firstUpdated(t) {\n    super.firstUpdated(t), this.readonly || (this.ariaLabel = this.ariaLabel?.length ? this.ariaLabel : this.i18n.expand);\n  }\n\n}\n\nt([e({\n  type: String\n})], o.prototype, \"action\", void 0);\nexport { o as CdsButtonExpand }; //# sourceMappingURL=button-expand.element.js.map","map":null,"metadata":{},"sourceType":"module"}