{"ast":null,"code":"import _asyncToGenerator from \"/Users/bajajro/Documents/navigator-oss/cloud-suitability-analyzer/go/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { querySelectorRoots as e } from \"../utils/dom.js\";\nimport { onFirstInteraction as t, onChildListMutation as r } from \"../utils/events.js\";\nimport { createId as a } from \"../utils/identity.js\";\nimport { KeyNavigationListController as s } from \"./key-navigation-list.controller.js\";\nlet i = null;\n\nfunction d(e) {\n  return t => t.addInitializer(t => new n(t, e));\n}\n\nclass n {\n  constructor(e, t) {\n    this.host = e, this.id = \"__\" + a(), this.host.addController(this), this.config = {\n      layout: \"both\",\n      item: \"\",\n      dropZone: \"\",\n      manageFocus: !0,\n      manageTabindex: !1,\n      ...t\n    };\n  }\n\n  get items() {\n    return e(this.host, this.config.item + '[draggable=\"true\"]');\n  }\n\n  get dropZones() {\n    return e(this.host, this.config.dropZone + '[draggable=\"false\"]');\n  }\n\n  hostConnected() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.host.updateComplete, t(_this.host).then(() => {\n        _this.addDragEventListeners(_this.items), _this.initializeKeyListController(), _this.host.addEventListener(\"click\", /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (e) {\n            return _this.clickItem(e);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()), _this.host.addEventListener(\"cdsKeyChange\", e => _this.focusItem(e)), _this.host.shadowRoot?.addEventListener(\"click\", /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (e) {\n            return _this.clickItem(e);\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }()), _this.host.shadowRoot?.addEventListener(\"cdsKeyChange\", e => _this.focusItem(e)), _this.observer = r(_this.host, e => {\n          if (e) {\n            const t = Array.from(e.addedNodes).filter(e => e.draggable);\n            t.length && _this.addDragEventListeners(t);\n          }\n        });\n      });\n    })();\n  }\n\n  hostDisconnected() {\n    this.observer?.disconnect();\n  }\n\n  initializeKeyListController() {\n    Object.defineProperty(this.host, this.id, {\n      get: () => this.items.map(e => e.querySelector(\"[cds-draggable]\"))\n    }), new s(this.host, {\n      layout: this.config.layout,\n      keyListItems: this.id,\n      manageFocus: this.config.manageFocus,\n      manageTabindex: this.config.manageTabindex\n    });\n  }\n\n  clickItem(e) {\n    const t = Array.from(e.composedPath()).find(e => e.getAttribute && \"handle\" === e.getAttribute(\"cds-draggable\")),\n          r = e.composedPath()[0].closest(\"[draggable]\");\n    t && r && (\"true\" === t.ariaPressed ? (r.setAttribute(\"cds-draggable\", \"active\"), o(e.currentTarget, r, null, \"grabbed\", \"touch\")) : \"false\" === t.ariaPressed && (r.removeAttribute(\"cds-draggable\"), o(e.currentTarget, r, null, \"dropped\", \"touch\")));\n  }\n\n  focusItem(e) {\n    if (e.detail.keyListItems === this.id && \"active\" === e.detail.previousItem?.closest(\"[draggable]\").getAttribute(\"cds-draggable\")) {\n      const t = e.detail.previousItem?.closest(\"[draggable]\"),\n            r = e.detail.activeItem.closest(\"[draggable]\");\n      \"handle\" === e.detail.activeItem.getAttribute(\"cds-draggable\") && t !== r && (e.detail.previousItem.ariaPressed = \"false\", e.detail.activeItem.ariaPressed = \"true\", e.detail.previousItem.pressed = !1, e.detail.activeItem.pressed = !0, t.removeAttribute(\"cds-draggable\"), r.setAttribute(\"cds-draggable\", \"active\"), o(e.detail.activeItem, t, r, \"reordered\", \"key\"));\n    }\n  }\n\n  addDragEventListeners(e) {\n    e.filter(e => !e.cdsDraggableItem).forEach(e => {\n      return (t = e).cdsDraggableItem = \"item\", t.addEventListener(\"dragstart\", g, !1), t.addEventListener(\"dragover\", c, !1), t.addEventListener(\"drop\", l, !1), t.addEventListener(\"dragleave\", u, !1), void t.addEventListener(\"dragend\", e => e.currentTarget.removeAttribute(\"cds-draggable\"), !1);\n      var t;\n    }), this.dropZones.filter(e => !e.cdsDraggableItem).forEach(e => {\n      e.addEventListener(\"dragover\", c, !1), e.addEventListener(\"dragleave\", u, !1), e.addEventListener(\"drop\", l, !1), e.cdsDraggableItem = \"dropzone\";\n    });\n  }\n\n}\n\nfunction o(_x3, _x4, _x5, _x6, _x7) {\n  return _o.apply(this, arguments);\n}\n\nfunction _o() {\n  _o = _asyncToGenerator(function* (e, t, r, a, s) {\n    e?.updateComplete && (yield e.updateComplete), e.dispatchEvent(new CustomEvent(\"cdsDraggableChange\", {\n      detail: {\n        from: t,\n        target: r,\n        type: a,\n        interaction: s\n      },\n      bubbles: !0\n    }));\n  });\n  return _o.apply(this, arguments);\n}\n\nfunction g(e) {\n  i = e.currentTarget, e.dataTransfer.effectAllowed = \"move\", e.dataTransfer.setDragImage(e.currentTarget, 0, 0), e.currentTarget.setAttribute(\"cds-draggable\", \"active\"), o(e.currentTarget, e.currentTarget, null, \"grabbed\", \"touch\");\n}\n\nfunction c(e) {\n  return e.preventDefault && e.preventDefault(), e.dataTransfer.dropEffect = \"move\", i !== e.currentTarget && e.currentTarget.setAttribute(\"cds-draggable\", \"target\"), !1;\n}\n\nfunction l(e) {\n  const t = i,\n        r = e.currentTarget;\n  return t?.removeAttribute(\"cds-draggable\"), r?.removeAttribute(\"cds-draggable\"), o(e.currentTarget, t, r, \"reordered\", \"touch\"), !1;\n}\n\nfunction u(e) {\n  \"target\" === e.currentTarget.getAttribute(\"cds-draggable\") && e.currentTarget.removeAttribute(\"cds-draggable\");\n}\n\nexport { n as DraggableListController, d as draggableList }; //# sourceMappingURL=draggable-list.controller.js.map","map":null,"metadata":{},"sourceType":"module"}