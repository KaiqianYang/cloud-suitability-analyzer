{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { LitElement as e, html as r } from \"lit\";\nimport { assignSlotNames as s, baseStyles as o, state as i, querySlotAll as n } from \"@cds/core/internal\";\nimport a from \"./alert-actions.element.scss.js\";\n\nclass p extends e {\n  constructor() {\n    super(...arguments);\n    this.type = \"light\";\n  }\n\n  render() {\n    return r`<div class=\"private-host\" cds-layout=\"horizontal wrap:none gap:xs align:vertical-center\"><slot></slot></div>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), s([this, \"actions\"]);\n  }\n\n  updated(t) {\n    super.updated(t), this.buttons.forEach(t => {\n      t.status = \"banner\" === this.type ? \"inverse\" : \"primary\", t.size = \"banner\" === this.type ? \"sm\" : \"md\", t.style.setProperty(\"--color\", \"inherit\");\n    });\n  }\n\n  static get styles() {\n    return [o, a];\n  }\n\n}\n\nt([i({\n  type: String,\n  reflect: !0\n})], p.prototype, \"type\", void 0), t([n(\"cds-button\")], p.prototype, \"buttons\", void 0);\nexport { p as CdsAlertActions }; //# sourceMappingURL=alert-actions.element.js.map","map":null,"metadata":{},"sourceType":"module"}