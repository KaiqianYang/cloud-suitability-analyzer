{"ast":null,"code":"import _asyncToGenerator from \"/Users/bajajro/Documents/navigator-oss/cloud-suitability-analyzer/go/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate as t } from \"tslib\";\nimport { LitElement as o, html as s } from \"lit\";\nimport { query as e } from \"lit/decorators/query.js\";\nimport { setAttributes as i, syncProps as a, syncDefinedProps as r, describeElementByElements as l, calculateOptimalLayout as n, baseStyles as d, property as p, querySlot as c, querySlotAll as u, id as h, event as y, responsive as g } from \"@cds/core/internal\";\nimport m from \"./control-group.element.scss.js\";\nimport { defaultFormLayout as v, defaultControlWidth as b, getStatusIcon as L, inlineControlListIsWrapped as f, controlIsWrapped as C, getCurrentMessageStatus as $, formLayouts as z } from \"../utils/utils.js\";\nlet A = class extends o {\n  constructor() {\n    super(...arguments);\n    this.status = \"neutral\", this.layout = v, this.controlAlign = \"left\", this.disabled = !1, this.controlWidth = b, this.responsive = !0, this.isInlineControlGroup = !1, this.isControlGroup = !0;\n  }\n\n  get messagesTemplate() {\n    return s`<div ?hidden=\"${0 === this.messages.length}\" cds-layout=\"horizontal align:shrink gap:xs wrap:none\" class=\"messages-container\">${this.isInlineControlGroup ? \"\" : L(this.status)}<div class=\"messages\"><slot name=\"message\" @slotchange=\"${this.updateControlMessages}\"></slot></div></div>`;\n  }\n\n  get controlsTemplate() {\n    return this.isInlineControlGroup ? s`<div cds-layout=\"horizontal gap:xs align:horizontal-stretch\" class=\"input-container\"><div class=\"controls\" cds-layout=\"horizontal align:horizontal-stretch wrap:none\"><slot name=\"controls\"></slot></div>${L(this.status)}</div>` : s`<div cds-layout=\"horizontal align:shrink\" class=\"input-container\"><div class=\"controls\" cds-layout=\"${this.inlineControlLayout}\"><slot name=\"controls\"></slot></div></div>`;\n  }\n\n  get inlineControlLayout() {\n    return `${this.layout.includes(\"inline\") || \"compact\" === this.layout ? \"horizontal gap:sm\" : \"vertical gap:xs\"} ${this.layout.includes(\"vertical\") ? \"\" : \"wrap:none\"}`;\n  }\n\n  get primaryLabelLayout() {\n    return this.layout.includes(\"vertical\") ? \"vertical gap:xs\" : \"horizontal gap:lg\";\n  }\n\n  get controlMessageLayout() {\n    return (\"compact\" === this.layout ? \"horizontal\" : \"vertical\") + \" gap:xs wrap:none align:stretch\";\n  }\n\n  render() {\n    return s`<div class=\"private-host\" cds-layout=\"${this.primaryLabelLayout}\"><cds-internal-control-label .disabled=\"${this.disabled}\" cds-layout=\"align:top\" action=\"primary\"><slot name=\"label\"></slot></cds-internal-control-label><div class=\"control-message-container\" cds-layout=\"${this.controlMessageLayout}\">${this.controlsTemplate} ${this.messagesTemplate}</div></div>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), i(this, [\"role\", \"group\"], [\"cds-control-group\", \"\"]);\n  }\n\n  firstUpdated(t) {\n    super.firstUpdated(t), this.associateLabelAndGroup(), this.setupResponsive();\n  }\n\n  updated(t) {\n    super.updated(t), t.set(\"isControlGroup\", !0), this.controls.forEach(t => t.isControlGroup = !0), this.messages.forEach(o => a(o, this, {\n      disabled: t.has(\"disabled\")\n    })), r(t, this, Array.from(this.controls));\n  }\n\n  get layoutStable() {\n    return !f(Array.from(this.controls), this.layout) && !C(this.controlSlot, this.controlLabel, this.layout);\n  }\n\n  associateLabelAndGroup() {\n    this.setAttribute(\"aria-labelledby\", this.groupLabelId), this.label.setAttribute(\"id\", this.groupLabelId);\n  }\n\n  updateControlMessages() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      l(_this, Array.from(_this.messages)), _this.status = yield $(Array.from(_this.messages));\n    })();\n  }\n\n  setupResponsive() {\n    if (this.responsive) {\n      const t = {\n        layouts: z,\n        initialLayout: this.layout\n      };\n      this.addEventListener(\"cdsResizeChange\", () => n(this, t).then(() => this.layoutChange.emit(this.layout, {\n        bubbles: !0\n      })));\n    }\n  }\n\n};\nA.styles = [d, m], t([p({\n  type: String\n})], A.prototype, \"status\", void 0), t([p({\n  type: String\n})], A.prototype, \"layout\", void 0), t([p({\n  type: String\n})], A.prototype, \"controlAlign\", void 0), t([p({\n  type: Boolean\n})], A.prototype, \"disabled\", void 0), t([p({\n  type: String\n})], A.prototype, \"controlWidth\", void 0), t([p({\n  type: Boolean\n})], A.prototype, \"responsive\", void 0), t([c(\"label\", {\n  assign: \"label\",\n  required: \"warning\",\n  requiredMessage: \"To meet a11y standards a <label> should be provided\"\n})], A.prototype, \"label\", void 0), t([u(\"cds-control, [cds-control]\")], A.prototype, \"controls\", void 0), t([u(\"cds-control-message\")], A.prototype, \"messages\", void 0), t([e(\"cds-internal-control-label[action=primary]\", !0)], A.prototype, \"controlLabel\", void 0), t([e(\".controls\", !0)], A.prototype, \"controlSlot\", void 0), t([h()], A.prototype, \"groupLabelId\", void 0), t([y()], A.prototype, \"layoutChange\", void 0), A = t([g()], A);\nexport { A as CdsInternalControlGroup }; //# sourceMappingURL=control-group.element.js.map","map":null,"metadata":{},"sourceType":"module"}