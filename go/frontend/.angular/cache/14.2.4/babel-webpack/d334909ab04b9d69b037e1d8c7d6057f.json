{"ast":null,"code":"import _asyncToGenerator from \"/Users/bajajro/Documents/navigator-oss/cloud-suitability-analyzer/go/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { listenForAttributeChange as t } from \"../utils/events.js\";\nimport { getActiveElement as s } from \"../utils/focus.js\";\n\nfunction e(t = {\n  focus: !0\n}) {\n  return s => s.addInitializer(s => new r(s, t));\n}\n\nclass r {\n  constructor(t, e = {\n    focus: !0\n  }) {\n    this.host = t, this.config = e, this.activeElement = s(), this.host.addController(this);\n  }\n\n  get current() {\n    return this.host.trigger ? this._current : this.activeElement;\n  }\n\n  get prev() {\n    return this._prev;\n  }\n\n  hostConnected() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.observer = t(_this.host, \"hidden\", () => {\n        const t = s();\n        !_this.host.hidden && t ? _this.activeElement = t : _this.focusCurrent();\n      });\n    })();\n  }\n\n  hostUpdate() {\n    this._current !== this.host.trigger && (this._prev = this._current, this._current = this.host.trigger ? this.host.trigger : this.activeElement);\n  }\n\n  hostDisconnected() {\n    this.focusCurrent(), this.observer?.disconnect();\n  }\n\n  focusCurrent() {\n    this.config.focus && this.current?.focus();\n  }\n\n}\n\nexport { r as TriggerController, e as triggerable }; //# sourceMappingURL=trigger.controller.js.map","map":null,"metadata":{},"sourceType":"module"}