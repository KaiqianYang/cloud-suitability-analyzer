{"ast":null,"code":"import _asyncToGenerator from \"/Users/bajajro/Documents/navigator-oss/cloud-suitability-analyzer/go/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate as t } from \"tslib\";\nimport { LitElement as e, html as s } from \"lit\";\nimport { query as i } from \"lit/decorators/query.js\";\nimport { getElementLanguageDirection as o, baseStyles as a, hasAriaLabelTypeAttr as l, syncProps as r, describeElementByElements as n, getElementUpdates as p, childrenUpdateComplete as u, pxToRem as d, calculateOptimalLayout as h, property as c, state as y, querySlot as f, querySlotAll as g, event as b, responsive as m } from \"@cds/core/internal\";\nimport v from \"./control.element.scss.js\";\nimport { syncHTML5Validation as x } from \"../utils/validate.js\";\nimport { defaultControlWidth as L, defaultFormLayout as C, getStatusIcon as A, associateInputAndLabel as T, associateInputToDatalist as $, getCurrentMessageStatus as S, controlIsWrapped as I, formLayouts as k } from \"../utils/utils.js\";\nvar w;\n!function (t) {\n  t.default = \"default\", t.ariaLabel = \"aria-label\", t.inputGroup = \"input-group\", t.hiddenLabel = \"hidden-label\";\n}(w || (w = {}));\nlet D = class extends e {\n  constructor() {\n    super(...arguments);\n    this.status = \"neutral\", this.controlWidth = L, this.validate = !1, this.responsive = !0, this._layout = C, this.focused = !1, this.disabled = !1, this.readonly = !1, this.fixedControlWidth = !1, this.supportsPrefixSuffixActions = !0, this.labelLayout = w.default, this.observers = [];\n  }\n\n  get layout() {\n    return this._layout;\n  }\n\n  set layout(t) {\n    const e = this._layout;\n    this._layout = t ? t.replace(\"-inline\", \"\") : C, this.requestUpdate(\"layout\", e);\n  }\n\n  get isRTL() {\n    return \"rtl\" === o(this);\n  }\n\n  static get styles() {\n    return [a, v];\n  }\n\n  get hasAriaLabelTypeAttr() {\n    return l(this.inputControl);\n  }\n\n  get hasStatusIcon() {\n    return this.labelLayout !== w.inputGroup && (\"error\" === this.status || \"success\" === this.status);\n  }\n\n  render() {\n    return s`${this.labelLayout === w.hiddenLabel || this.labelLayout === w.inputGroup ? s`<span cds-layout=\"display:screen-reader-only\"><slot name=\"label\" @slotchange=\"${() => this.associateInputAndLabel()}\"></slot></span>` : \"\"}<div cds-layout=\"${\"vertical\" === this.layout ? \"vertical gap:xs\" : \"horizontal gap:lg\"} align:stretch\" class=\"private-host ${this.isRTL ? \"rtl\" : \"\"}\">${this.primaryLabelTemplate}<div class=\"input-message-container\" cds-layout=\"\n          wrap:none\n          ${\"compact\" === this.layout ? \"horizontal\" : \"vertical\"}\n          ${\"stretch\" !== this.controlWidth || this.fixedControlWidth ? \"\" : \"align:horizontal-stretch\"}\n          ${this.messages?.length ? \"gap:xs\" : \"\"}\"><div cds-layout=\"horizontal gap:xs wrap:none\"><div cds-layout=\"horizontal align:top wrap:none ${\"shrink\" === this.controlWidth || this.fixedControlWidth ? \"align:shrink\" : \"align:horizontal-stretch\"}\" class=\"${this.hasStatusIcon ? \"input-container with-status-icon\" : \"input-container\"}\">${this.inputTemplate} ${this.prefixTemplate}<slot name=\"input\"></slot>${this.suffixTemplate}</div>${this.hasStatusIcon ? A(this.status) : \"\"}</div>${this.messagesTemplate}<slot name=\"datalist\" @slotchange=\"${() => this.associateInputToDatalist()}\"></slot></div></div>`;\n  }\n\n  get inputTemplate() {\n    return s``;\n  }\n\n  get prefixDefaultTemplate() {\n    return null;\n  }\n\n  get suffixDefaultTemplate() {\n    return null;\n  }\n\n  get isGenericControl() {\n    return \"cds-control\" === this.tagName.toLowerCase();\n  }\n\n  get hasControlActions() {\n    return this.controlActions.length > 0 || this.prefixDefaultTemplate || this.suffixDefaultTemplate;\n  }\n\n  get primaryLabelTemplate() {\n    return s`${this.labelLayout === w.default ? s`<cds-internal-control-label .disabled=\"${this.disabled}\" cds-layout=\"align:shrink align:top\" action=\"primary\"><slot name=\"label\" @slotchange=\"${() => this.associateInputAndLabel()}\"></slot></cds-internal-control-label>` : \"\"}`;\n  }\n\n  get messagesTemplate() {\n    return s`<div cds-layout=\"${\"compact\" === this.layout ? \"align:shrink\" : \"\"}\" class=\"messages\"><slot name=\"message\"></slot></div>`;\n  }\n\n  get prefixTemplate() {\n    return s`<div cds-layout=\"align:shrink align:vertical-center\" class=\"prefix\"><div cds-layout=\"horizontal gap:xxs\">${this.prefixDefaultTemplate}<slot name=\"prefix\"></slot></div></div>`;\n  }\n\n  get suffixTemplate() {\n    return s`<div cds-layout=\"align:shrink align:vertical-center\" class=\"suffix\"><div cds-layout=\"horizontal gap:xxs\"><slot name=\"suffix\"></slot>${this.suffixDefaultTemplate}</div></div>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), this.setAttribute(\"cds-control\", \"\");\n  }\n\n  firstUpdated(t) {\n    super.firstUpdated(t), this.setupHostAttributes(), this.setupHTML5Validation(), this.setActionOffsetPadding(), this.setupResponsive(), this.setupDescribedByUpdates(), this.setupLabelLayout(), this.assignSlotIfInControlGroup();\n  }\n\n  updated(t) {\n    super.updated(t), this.messages.forEach(e => r(e, this, {\n      disabled: t.has(\"disabled\")\n    })), r(this.inputControl, this, {\n      disabled: t.has(\"disabled\")\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback(), this.observers.forEach(t => t?.disconnect());\n  }\n\n  associateInputAndLabel() {\n    T(this.inputControl, this.label);\n  }\n\n  associateInputToDatalist() {\n    $(this.inputControl, this.datalistControl);\n  }\n\n  setupDescribedByUpdates() {\n    var _this = this;\n\n    this.messageSlot?.addEventListener(\"slotchange\", /*#__PURE__*/_asyncToGenerator(function* () {\n      n(_this.inputControl, Array.from(_this.messages)), S(Array.from(_this.messages)).then(t => _this.status = t);\n    }));\n  }\n\n  setupHostAttributes() {\n    this.inputControl.addEventListener(\"focusin\", () => this.focused = !0), this.inputControl.addEventListener(\"focusout\", () => this.focused = !1), this.observers.push(p(this.inputControl, \"disabled\", t => this.disabled = \"\" === t || t), p(this.inputControl, \"aria-disabled\", t => this.disabled = \"true\" === t), p(this.inputControl, \"readonly\", t => this.readonly = \"\" === t || t));\n  }\n\n  setupHTML5Validation() {\n    !this.inputControl?.form?.noValidate && this.validate && x(this, Array.from(this.messages));\n  }\n\n  setActionOffsetPadding() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const t = _this2.prefixAction?.updateComplete,\n            e = _this2.suffixAction?.updateComplete;\n\n      if ((yield t) || Promise.resolve(!0), (yield e) || Promise.resolve(!0), yield u(_this2.controlActions), !_this2.isGenericControl && _this2.supportsPrefixSuffixActions && _this2.hasControlActions) {\n        const t = d(_this2.prefixAction.getBoundingClientRect().width + 6),\n              e = d(_this2.suffixAction.getBoundingClientRect().width + 6);\n        _this2.inputControl.style.setProperty(\"padding-left\", _this2.isRTL ? e : t, \"important\"), _this2.inputControl.style.setProperty(\"padding-right\", _this2.isRTL ? t : e, \"important\");\n      }\n    })();\n  }\n\n  get layoutStable() {\n    return this.labelLayout !== w.default || !I(this.inputControl, this.controlLabel, this.layout);\n  }\n\n  setupResponsive() {\n    if (this.responsive && this.labelLayout === w.default && this.controlLabel) {\n      const t = {\n        layouts: k,\n        initialLayout: this.layout\n      };\n      this.addEventListener(\"cdsResizeChange\", () => {\n        h(this, t).then(t => {\n          t && this.layoutChange.emit(this.layout, {\n            bubbles: !0\n          });\n        });\n      });\n    }\n  }\n\n  setupLabelLayout() {\n    this.label?.getAttribute(\"cds-layout\")?.includes(\"display:screen-reader-only\") && (this.labelLayout = w.hiddenLabel), this.hasAriaLabelTypeAttr && (this.labelLayout = w.ariaLabel);\n  }\n\n  assignSlotIfInControlGroup() {\n    this.parentElement?.hasAttribute(\"cds-control-group\") && this.setAttribute(\"slot\", \"controls\");\n  }\n\n};\nt([c({\n  type: String\n})], D.prototype, \"status\", void 0), t([c({\n  type: String\n})], D.prototype, \"controlWidth\", void 0), t([c({\n  type: Boolean\n})], D.prototype, \"validate\", void 0), t([c({\n  type: Boolean\n})], D.prototype, \"responsive\", void 0), t([c({\n  type: String\n})], D.prototype, \"layout\", null), t([y({\n  type: Boolean,\n  reflect: !0\n})], D.prototype, \"focused\", void 0), t([y({\n  type: Boolean,\n  reflect: !0\n})], D.prototype, \"disabled\", void 0), t([y({\n  type: Boolean,\n  reflect: !0\n})], D.prototype, \"readonly\", void 0), t([y()], D.prototype, \"fixedControlWidth\", void 0), t([y()], D.prototype, \"supportsPrefixSuffixActions\", void 0), t([y()], D.prototype, \"isRTL\", null), t([y()], D.prototype, \"labelLayout\", void 0), t([f(\"input, select, textarea, [cds-control]\", {\n  required: \"error\",\n  requiredMessage: \"input element is missing\",\n  assign: \"input\"\n})], D.prototype, \"inputControl\", void 0), t([f(\"label\", {\n  required: \"error\",\n  requiredMessage: \"To meet a11y standards either a <label> or input[aria-label] should be provided.\",\n  assign: \"label\",\n  exemptOn: t => t.hasAriaLabelTypeAttr\n})], D.prototype, \"label\", void 0), t([i(\"cds-internal-control-label[action=primary]\")], D.prototype, \"controlLabel\", void 0), t([f(\"datalist\", {\n  assign: \"datalist\"\n})], D.prototype, \"datalistControl\", void 0), t([g(\"cds-control-message\")], D.prototype, \"messages\", void 0), t([g(\"[cds-button-action]\")], D.prototype, \"controlActions\", void 0), t([i(\".prefix\")], D.prototype, \"prefixAction\", void 0), t([i(\".suffix\")], D.prototype, \"suffixAction\", void 0), t([i(\".messages\")], D.prototype, \"messageSlot\", void 0), t([b()], D.prototype, \"layoutChange\", void 0), D = t([m()], D);\nexport { D as CdsControl, w as ControlLabelLayout }; //# sourceMappingURL=control.element.js.map","map":null,"metadata":{},"sourceType":"module"}