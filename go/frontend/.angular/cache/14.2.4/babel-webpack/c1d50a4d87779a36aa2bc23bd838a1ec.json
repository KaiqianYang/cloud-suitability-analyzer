{"ast":null,"code":"import t from \"ramda/es/is.js\";\nimport n from \"ramda/es/isEmpty.js\";\n\nfunction r(t) {\n  return null == t;\n}\n\nfunction e(t) {\n  return r(t) || n(t);\n}\n\nfunction u(n) {\n  return t(String, n);\n}\n\nfunction i(t) {\n  return u(t) && !n(t.trim()) && +t == +t;\n}\n\nfunction c(n) {\n  return t(String, n) || r(n);\n}\n\nfunction s(t) {\n  return u(t) && !r(t) && !n(t);\n}\n\nfunction f(n) {\n  return t(Object, n);\n}\n\nfunction a(n) {\n  return t(Map, n);\n}\n\nfunction o(t) {\n  return !e(t) && f(t);\n}\n\nfunction l(t, n) {\n  return t !== n;\n}\n\nfunction d(t, n) {\n  return c(t) && l(t, n);\n}\n\nfunction h(t, n) {\n  return !e(t) && l(t, n);\n}\n\nfunction m(t) {\n  return Object.values(t);\n}\n\nfunction p(t = \"_\") {\n  return `${t}${Math.random().toString(36).substr(2, 9)}`;\n}\n\nfunction g(t, n) {\n  return JSON.stringify(t) === JSON.stringify(n);\n}\n\nfunction y(t, n, r = `\\${${t}}`) {\n  return t.split(\".\").reduce((t, n) => {\n    try {\n      const e = t[n];\n\n      switch (!0) {\n        case null === e:\n        case !1 === e:\n        case \"\" === e:\n        case 0 === e:\n          return e;\n\n        default:\n          return e || r;\n      }\n    } catch {\n      return r;\n    }\n  }, n);\n}\n\nfunction A(t) {\n  const n = new Map();\n\n  for (const [r, e] of t) a(e) ? n.set(r, A(e)) : n.set(r, e);\n\n  return n;\n}\n\nfunction b(t) {\n  switch (!0) {\n    case a(t):\n      return A(t);\n\n    case f(t) && !Array.isArray(t):\n      return x({}, t);\n\n    default:\n      return JSON.parse(JSON.stringify(t));\n  }\n}\n\nfunction O(t) {\n  switch (!0) {\n    case \"true\" === t:\n      return !0;\n\n    case \"false\" === t:\n      return !1;\n\n    case \"null\" === t:\n      return null;\n\n    case \"undefined\" === t:\n      return;\n\n    case i(t):\n      return +t;\n\n    default:\n      return t;\n  }\n}\n\nfunction S(t) {\n  return t.split(\" \").map(t => t.split(\":\")).map(t => {\n    const [n, r] = t;\n    return [n, O(r)];\n  });\n}\n\nfunction w(t, n, r) {\n  if (!n) return !0;\n  const e = S(n);\n  if (!t) return !1;\n  if (e.length < 1) return !0;\n  {\n    const n = e.filter(n => {\n      const [r, e] = n;\n      return N(t, r, e);\n    });\n    return \"all\" === r ? n.length === e.length : n.length > 0;\n  }\n}\n\nfunction j(t, n) {\n  return w(t, n, \"all\");\n}\n\nfunction J(t, n) {\n  return w(t, n, \"any\");\n}\n\nfunction N(t, n, r) {\n  if (n in t) return !1 === r ? !t[n] : t[n] === r;\n  if (!t.hasAttribute || !t.hasAttribute(n)) return !t.hasAttribute && (!1 === r || void 0 === r) || !1;\n  {\n    const e = t.hasAttribute(n) && t.getAttribute(n);\n    if ([\"null\", \"false\", \"undefined\"].indexOf(e) > -1) switch (r) {\n      case null:\n        return \"null\" === e;\n\n      case !1:\n        return \"false\" === e;\n\n      default:\n        return !r;\n    } else switch (r) {\n      case !1:\n        return !e || \"false\" === e;\n\n      case !0:\n        return \"\" === e || \"true\" === e;\n\n      default:\n        return e === r.toString();\n    }\n  }\n}\n\nfunction $(t, ...n) {\n  return n.map(n => t(n)).indexOf(!1) < 0;\n}\n\nfunction v(...t) {\n  return $(t => void 0 !== t, ...t);\n}\n\nfunction x(...t) {\n  const n = {};\n  return t.map(t => f(t) ? { ...t\n  } : {}).forEach(t => {\n    Object.keys(t).forEach(r => {\n      const e = t[r];\n      Array.isArray(e) ? n[r] = Array.from(e) : f(e) ? n[r] = x(n[r] || {}, e) : n[r] = e;\n    });\n  }), n;\n}\n\nexport { $ as allAre, v as allAreDefined, j as allPropertiesPass, w as anyOrAllPropertiesPass, J as anyPropertiesPass, O as convertAttributeStringValuesToValue, S as convertStringPropValuePairsToTuple, p as createId, b as deepClone, N as doesPropertyPass, m as getEnumValues, y as getFromObjectPath, l as hasPropertyChanged, d as hasStringPropertyChanged, h as hasStringPropertyChangedAndNotNil, a as isMap, r as isNil, e as isNilOrEmpty, i as isNumericString, f as isObject, o as isObjectAndNotNilOrEmpty, u as isString, s as isStringAndNotNilOrEmpty, c as isStringOrNil, x as mergeObjects, g as objectNaiveDeepEquals }; //# sourceMappingURL=identity.js.map","map":null,"metadata":{},"sourceType":"module"}